//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class ExpenseGroupClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:6001";
    }

    getAllIds(): Observable<string[]> {
        let url_ = this.baseUrl + "/api/v1/ExpenseGroup";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllIds(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllIds(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string[]>;
        }));
    }

    protected processGetAllIds(response: HttpResponseBase): Observable<string[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    post(expenseGroupRequest: ExpenseGroupRequest): Observable<string> {
        let url_ = this.baseUrl + "/api/v1/ExpenseGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(expenseGroupRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPost(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPost(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processPost(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAllWithDetails(): Observable<ExpenseGroup[]> {
        let url_ = this.baseUrl + "/api/v1/ExpenseGroup/details";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllWithDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllWithDetails(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExpenseGroup[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExpenseGroup[]>;
        }));
    }

    protected processGetAllWithDetails(response: HttpResponseBase): Observable<ExpenseGroup[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ExpenseGroup.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getExpenseGroup(id: string): Observable<ExpenseGroup> {
        let url_ = this.baseUrl + "/api/v1/ExpenseGroup/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetExpenseGroup(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetExpenseGroup(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExpenseGroup>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExpenseGroup>;
        }));
    }

    protected processGetExpenseGroup(response: HttpResponseBase): Observable<ExpenseGroup> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExpenseGroup.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    put(id: number, expenseGroupRequest: ExpenseGroupRequest): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/ExpenseGroup/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(expenseGroupRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPut(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPut(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processPut(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    delete(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/ExpenseGroup/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class InvitationClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:6001";
    }

    getRecievedInvitations(): Observable<InvitationResponse[]> {
        let url_ = this.baseUrl + "/api/v1/invitations/Received";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRecievedInvitations(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRecievedInvitations(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<InvitationResponse[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<InvitationResponse[]>;
        }));
    }

    protected processGetRecievedInvitations(response: HttpResponseBase): Observable<InvitationResponse[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(InvitationResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getSentInvitations(): Observable<InvitationResponse[]> {
        let url_ = this.baseUrl + "/api/v1/invitations/sent";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSentInvitations(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSentInvitations(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<InvitationResponse[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<InvitationResponse[]>;
        }));
    }

    protected processGetSentInvitations(response: HttpResponseBase): Observable<InvitationResponse[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(InvitationResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getInvitation(id: string): Observable<InvitationResponse> {
        let url_ = this.baseUrl + "/api/v1/invitations/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetInvitation(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetInvitation(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<InvitationResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<InvitationResponse>;
        }));
    }

    protected processGetInvitation(response: HttpResponseBase): Observable<InvitationResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = InvitationResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    put(id: string, invitationRequest: InvitationRequest): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/invitations/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(invitationRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPut(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPut(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processPut(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    post(invitationRequest: InvitationRequest): Observable<InvitationResponse> {
        let url_ = this.baseUrl + "/api/v1/invitations";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(invitationRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPost(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPost(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<InvitationResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<InvitationResponse>;
        }));
    }

    protected processPost(response: HttpResponseBase): Observable<InvitationResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = InvitationResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class OperationClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:6001";
    }

    index(): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Operation/healthcheck";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processIndex(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processIndex(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse | null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse | null>;
        }));
    }

    protected processIndex(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    authorizedIndex(): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Operation/healthcheck/authorized";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAuthorizedIndex(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAuthorizedIndex(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse | null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse | null>;
        }));
    }

    protected processAuthorizedIndex(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class DTOBaseClass implements IDTOBaseClass {
    id!: string;
    created!: Date;
    lastEdited!: Date;
    active!: boolean;

    constructor(data?: IDTOBaseClass) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.lastEdited = _data["lastEdited"] ? new Date(_data["lastEdited"].toString()) : <any>undefined;
            this.active = _data["active"];
        }
    }

    static fromJS(data: any): DTOBaseClass {
        data = typeof data === 'object' ? data : {};
        let result = new DTOBaseClass();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["lastEdited"] = this.lastEdited ? this.lastEdited.toISOString() : <any>undefined;
        data["active"] = this.active;
        return data;
    }
}

export interface IDTOBaseClass {
    id: string;
    created: Date;
    lastEdited: Date;
    active: boolean;
}

export class ExpenseGroup extends DTOBaseClass implements IExpenseGroup {
    name!: string;
    totalAmount!: number;
    expenseGroupMembers!: ExpenseGroupMember[];
    expenseGroupInvitations!: ExpenseGroupInvitation[];

    constructor(data?: IExpenseGroup) {
        super(data);
        if (!data) {
            this.expenseGroupMembers = [];
            this.expenseGroupInvitations = [];
        }
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.name = _data["name"];
            this.totalAmount = _data["totalAmount"];
            if (Array.isArray(_data["expenseGroupMembers"])) {
                this.expenseGroupMembers = [] as any;
                for (let item of _data["expenseGroupMembers"])
                    this.expenseGroupMembers!.push(ExpenseGroupMember.fromJS(item));
            }
            if (Array.isArray(_data["expenseGroupInvitations"])) {
                this.expenseGroupInvitations = [] as any;
                for (let item of _data["expenseGroupInvitations"])
                    this.expenseGroupInvitations!.push(ExpenseGroupInvitation.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): ExpenseGroup {
        data = typeof data === 'object' ? data : {};
        let result = new ExpenseGroup();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["totalAmount"] = this.totalAmount;
        if (Array.isArray(this.expenseGroupMembers)) {
            data["expenseGroupMembers"] = [];
            for (let item of this.expenseGroupMembers)
                data["expenseGroupMembers"].push(item.toJSON());
        }
        if (Array.isArray(this.expenseGroupInvitations)) {
            data["expenseGroupInvitations"] = [];
            for (let item of this.expenseGroupInvitations)
                data["expenseGroupInvitations"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IExpenseGroup extends IDTOBaseClass {
    name: string;
    totalAmount: number;
    expenseGroupMembers: ExpenseGroupMember[];
    expenseGroupInvitations: ExpenseGroupInvitation[];
}

export class ExpenseGroupMember extends DTOBaseClass implements IExpenseGroupMember {
    balance!: number;
    paid!: number;
    expenseGroupId!: string;
    expenseGroup!: ExpenseGroup;
    profileId!: string;
    profile!: Profile;
    expenses!: Expense[];

    constructor(data?: IExpenseGroupMember) {
        super(data);
        if (!data) {
            this.expenseGroup = new ExpenseGroup();
            this.profile = new Profile();
            this.expenses = [];
        }
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.balance = _data["balance"];
            this.paid = _data["paid"];
            this.expenseGroupId = _data["expenseGroupId"];
            this.expenseGroup = _data["expenseGroup"] ? ExpenseGroup.fromJS(_data["expenseGroup"]) : new ExpenseGroup();
            this.profileId = _data["profileId"];
            this.profile = _data["profile"] ? Profile.fromJS(_data["profile"]) : new Profile();
            if (Array.isArray(_data["expenses"])) {
                this.expenses = [] as any;
                for (let item of _data["expenses"])
                    this.expenses!.push(Expense.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): ExpenseGroupMember {
        data = typeof data === 'object' ? data : {};
        let result = new ExpenseGroupMember();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["balance"] = this.balance;
        data["paid"] = this.paid;
        data["expenseGroupId"] = this.expenseGroupId;
        data["expenseGroup"] = this.expenseGroup ? this.expenseGroup.toJSON() : <any>undefined;
        data["profileId"] = this.profileId;
        data["profile"] = this.profile ? this.profile.toJSON() : <any>undefined;
        if (Array.isArray(this.expenses)) {
            data["expenses"] = [];
            for (let item of this.expenses)
                data["expenses"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IExpenseGroupMember extends IDTOBaseClass {
    balance: number;
    paid: number;
    expenseGroupId: string;
    expenseGroup: ExpenseGroup;
    profileId: string;
    profile: Profile;
    expenses: Expense[];
}

export class Profile extends DTOBaseClass implements IProfile {
    azureId!: string;
    email!: string;
    givenName!: string;
    memberships!: ExpenseGroupMember[];
    sentInvitations!: ExpenseGroupInvitation[];
    receivedInvitations!: ExpenseGroupInvitation[];

    constructor(data?: IProfile) {
        super(data);
        if (!data) {
            this.memberships = [];
            this.sentInvitations = [];
            this.receivedInvitations = [];
        }
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.azureId = _data["azureId"];
            this.email = _data["email"];
            this.givenName = _data["givenName"];
            if (Array.isArray(_data["memberships"])) {
                this.memberships = [] as any;
                for (let item of _data["memberships"])
                    this.memberships!.push(ExpenseGroupMember.fromJS(item));
            }
            if (Array.isArray(_data["sentInvitations"])) {
                this.sentInvitations = [] as any;
                for (let item of _data["sentInvitations"])
                    this.sentInvitations!.push(ExpenseGroupInvitation.fromJS(item));
            }
            if (Array.isArray(_data["receivedInvitations"])) {
                this.receivedInvitations = [] as any;
                for (let item of _data["receivedInvitations"])
                    this.receivedInvitations!.push(ExpenseGroupInvitation.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): Profile {
        data = typeof data === 'object' ? data : {};
        let result = new Profile();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["azureId"] = this.azureId;
        data["email"] = this.email;
        data["givenName"] = this.givenName;
        if (Array.isArray(this.memberships)) {
            data["memberships"] = [];
            for (let item of this.memberships)
                data["memberships"].push(item.toJSON());
        }
        if (Array.isArray(this.sentInvitations)) {
            data["sentInvitations"] = [];
            for (let item of this.sentInvitations)
                data["sentInvitations"].push(item.toJSON());
        }
        if (Array.isArray(this.receivedInvitations)) {
            data["receivedInvitations"] = [];
            for (let item of this.receivedInvitations)
                data["receivedInvitations"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IProfile extends IDTOBaseClass {
    azureId: string;
    email: string;
    givenName: string;
    memberships: ExpenseGroupMember[];
    sentInvitations: ExpenseGroupInvitation[];
    receivedInvitations: ExpenseGroupInvitation[];
}

export class ExpenseGroupInvitation extends DTOBaseClass implements IExpenseGroupInvitation {
    acceptance!: InvitationStatus;
    expenseGroupId!: string;
    expenseGroup!: ExpenseGroup;
    invitationProfileId!: string;
    invitationProfile!: Profile;
    profileId!: string;
    profile!: Profile;

    constructor(data?: IExpenseGroupInvitation) {
        super(data);
        if (!data) {
            this.expenseGroup = new ExpenseGroup();
            this.invitationProfile = new Profile();
            this.profile = new Profile();
        }
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.acceptance = _data["acceptance"];
            this.expenseGroupId = _data["expenseGroupId"];
            this.expenseGroup = _data["expenseGroup"] ? ExpenseGroup.fromJS(_data["expenseGroup"]) : new ExpenseGroup();
            this.invitationProfileId = _data["invitationProfileId"];
            this.invitationProfile = _data["invitationProfile"] ? Profile.fromJS(_data["invitationProfile"]) : new Profile();
            this.profileId = _data["profileId"];
            this.profile = _data["profile"] ? Profile.fromJS(_data["profile"]) : new Profile();
        }
    }

    static override fromJS(data: any): ExpenseGroupInvitation {
        data = typeof data === 'object' ? data : {};
        let result = new ExpenseGroupInvitation();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["acceptance"] = this.acceptance;
        data["expenseGroupId"] = this.expenseGroupId;
        data["expenseGroup"] = this.expenseGroup ? this.expenseGroup.toJSON() : <any>undefined;
        data["invitationProfileId"] = this.invitationProfileId;
        data["invitationProfile"] = this.invitationProfile ? this.invitationProfile.toJSON() : <any>undefined;
        data["profileId"] = this.profileId;
        data["profile"] = this.profile ? this.profile.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IExpenseGroupInvitation extends IDTOBaseClass {
    acceptance: InvitationStatus;
    expenseGroupId: string;
    expenseGroup: ExpenseGroup;
    invitationProfileId: string;
    invitationProfile: Profile;
    profileId: string;
    profile: Profile;
}

export enum InvitationStatus {
    Unknown = 0,
    Accepted = 1,
    Declined = 2,
    Cancelled = 3,
    Pending = 4,
    Expired = 5,
}

export class Expense extends DTOBaseClass implements IExpense {
    name!: string;
    amount!: number;

    constructor(data?: IExpense) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.name = _data["name"];
            this.amount = _data["amount"];
        }
    }

    static override fromJS(data: any): Expense {
        data = typeof data === 'object' ? data : {};
        let result = new Expense();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["amount"] = this.amount;
        super.toJSON(data);
        return data;
    }
}

export interface IExpense extends IDTOBaseClass {
    name: string;
    amount: number;
}

export class ExpenseGroupRequest implements IExpenseGroupRequest {
    name!: string;

    constructor(data?: IExpenseGroupRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): ExpenseGroupRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ExpenseGroupRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    }
}

export interface IExpenseGroupRequest {
    name: string;
}

export class InvitationResponse implements IInvitationResponse {
    acceptance!: InvitationStatus;
    expenseGroupId!: string;
    invitationProfileId!: string;
    profileId!: string;

    constructor(data?: IInvitationResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.acceptance = _data["acceptance"];
            this.expenseGroupId = _data["expenseGroupId"];
            this.invitationProfileId = _data["invitationProfileId"];
            this.profileId = _data["profileId"];
        }
    }

    static fromJS(data: any): InvitationResponse {
        data = typeof data === 'object' ? data : {};
        let result = new InvitationResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["acceptance"] = this.acceptance;
        data["expenseGroupId"] = this.expenseGroupId;
        data["invitationProfileId"] = this.invitationProfileId;
        data["profileId"] = this.profileId;
        return data;
    }
}

export interface IInvitationResponse {
    acceptance: InvitationStatus;
    expenseGroupId: string;
    invitationProfileId: string;
    profileId: string;
}

export class InvitationRequest implements IInvitationRequest {
    id!: string;
    expenseGroupId!: string;
    invitationProfileId!: string;
    profileId!: string;
    acceptance!: InvitationStatus;

    constructor(data?: IInvitationRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.expenseGroupId = _data["expenseGroupId"];
            this.invitationProfileId = _data["invitationProfileId"];
            this.profileId = _data["profileId"];
            this.acceptance = _data["acceptance"];
        }
    }

    static fromJS(data: any): InvitationRequest {
        data = typeof data === 'object' ? data : {};
        let result = new InvitationRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["expenseGroupId"] = this.expenseGroupId;
        data["invitationProfileId"] = this.invitationProfileId;
        data["profileId"] = this.profileId;
        data["acceptance"] = this.acceptance;
        return data;
    }
}

export interface IInvitationRequest {
    id: string;
    expenseGroupId: string;
    invitationProfileId: string;
    profileId: string;
    acceptance: InvitationStatus;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}